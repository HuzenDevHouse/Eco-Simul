Base Header Level: 1
Title: 
Author:

강준모
rapier83@gmail.com









공공 코딩교육 플랫폼
경제시뮬레이터만들기 그리고 세금의 실험
@ Huzen Dev. House












5 September 2017





----

# 1. 들어가면서 #

## 골칫덩어리 융합교육 ##

쉬운 사례
지구과학에서 지질연대와 지층에 대한 개념을 배우는 시간에 지리시간에 배운 우리나라 및 세계의 석탄 및 석유 분포를 통해 해당 지층이 어느 지질연대에 속했는지 파악할 수 있다. 

이 정도면….
수업 이전에 교과 선생님들 간의 간단한 토론을 통해 확인 할 수 있으며, 단순히 타 교과 교과서를 살펴 보는 것 만으로도 충분히 수업 설계 시 반영이 가능하다.

현실은?
그러나 교과서를 뛰어넘어 현장지도, 교육교보재 활용, 실습 등이 필요한 융합 수업설계의 경우 긴 시간의 연구가 필요하며 수헝 시행을 위해 교육과정의 재구성 및 필요한 것이 이만 저만이 아니다.


----

## 심지어 코딩(프로그래밍)교육이라니? ##

삼성의 소프트웨어 인재 육성
삼성이 2013년 5년간 1700억원을 투입해 소프트웨어 인력 5만명 양성에 나섰다. 이듬해 미래부 부터 정부 각 부처들이 SW 인력 양성 과정을 벤치마킹하고 교육부에서는 코딩교육의 의무화를 발표하는데….

어처구니 없는 현장의 반응
본인을 비롯한 현장의 엔지니어(개발자, 프로그래머)들은 어의도 없고 어처구니도 없다는 반응을 내놓았다. 일부의 반응이 아니라 빙산의 일각에 불과하다. 

우리나라는 코딩 안해도 컴퓨터 공학과를 졸업할 수 있는 나라인데 도데체 누가 교육 시키며, 누가 커리큘럼을 짠단 말인가?


----

## 엑셀과 피피티 ##

전문가의 영역에서 어느새 벗어난 두가지
과거 윈도우 95 이전의 스프레드 시트는 소위 전문가들만의 영역에 속했다. MS 오피스가 등장할 때 우리나라는 외국산 워드프로세서가 등장했다면서 해외자본의 독점을 우려했지만, 정작 독점을 한 것은 MS Word가 아니라 MS Excel 과 MS Power Point 였다. 이 두가지 툴이 업무에서 유용한 것이 하나씩 증명되면서 두가지는 어느새 필수 역량이 되었다. 파워포인트는 쉬운 편에 속하니 논외. 다만, 전문가의 도구였던 스프레드 시트는 99년 컴퓨터활용능력시험이 시작되면서 소위 좀 하신다는 분들은 시험 공부도 없이 수두룩하게 실기까지 통과해버렸다. 지금도 대부분 =sum(A1..B3) 정도는 하지 않나?

----

# 2. 이렇게 한번 해봅시다 #

## 엑셀 배우듯이 ##

수행평가와 대학 리포트
99년 수행평가가 도입 될 때 때 학교에서 보고서를 쓰게하는 경우가 있었다. 조별 발표수업을 하는 경우도 있었다. 대학에서 주로 하는 방식이 아닌가? 한가지 특이한 점은 대부분의 학생들이 한글 워드프로세서 정도는 쓸 줄 알았다. 파워포인트도 따로 교육이 없었지만 어느 다들 곧잘 다루었다. 물론 학습이 필요한 학생들도 있었겠지만 오랜 시간이 걸리지는 않았다. 반마다 컴퓨터 좀 한다는 친구한테 물어보면 되었으니.

----

## 해결의 실마리 ##

문제: 어떻게 제출하느냐?
Huzen Dev House 는 이점에 있어 "문서"로 제출하고 문서에 "표"가 많이 들어가는 것에 주목했다.  업무 현장에서도 서류는 워드프로세서에서 만들고 엑셀에서 표를 완성한 후 붙여 넣는다. 코드로 보여 줄 수 있는 건 뭐고 어떻게 제출해야되지?

코드로 보여주는 것
코드에는 컴퓨터에게 어떤 명령을 내릴 것인지 담겨져 있다. 그리고 그 명령은 프로그래밍 언어(Language)로 되어있다. 

시작이 문제
과거에 아래아한글을 누구나 쓸 수 있었던 이유는 컴퓨터가 보급되면서 대체로 같이 보급되었기 때문이다. MS 오피스도 마찬가지. 코드를 짜려면 무엇이 필요하지? 보통 여기서 질문이 좌절로 바뀐다. 프로그래밍 언어는 너무 많고, 현장에서 쓰는 언어는 지나치게 전문적이여서 따로 교육을 받아도 경험을 오래 쌓아야 능숙하게 다룰 수 있다. 그리고 또 한가지는 처음 부터 끝까지 영어라는 점.

Back to the Basic
현장의 대표적 언어는 C++와 JAVA, JavaScript (둘은 완전히 다르다). C++과 JAVA 는 각각 포인터, 객체 등에서 명령어가 너무 복잡하고 JavaScipt는 웹페이지 안에서만 쓸 수 있다는 점에서 한계. (물론 다른 방법을 이용하면 여러가지로 활용 가능하나 생략) 그런데 왜 이런 언어만 쓰는지 90년대 컴퓨터 학원이 미술학원과 동등한 위치에 있던 시절 GW BASIC 등을 공부해본 사람들은 있을텐데?

BASIC은 당시 주요 언어였던 Fortran, COBOL, Turbo C 등을 익히기 전에 감을 잡기 위한 교육용 언어로 개발되었다. 키보드로 명령을 10, 20, 30, 단위로 치면 되었고 결과는 run 명령을 치면 바로바로 실행되었다. 자주 쓰는 명령어들은 아래에 딱 10가지만 있어서 그것만으로도 * 로 크리스마스 트리 만들기도 했었다. 다시 그 정도로 가면 안되나? 가능성은 있다.

하나 고릅시다.
그렇게 해서 나온 언어들이 꽤 많다. 우리는 그중에서 Python 을 이용하려고 한다. 세상이 좋아져서 그런지 단순한 언어만으로도 많은 일을 할 수 있으며, NASA 부터 Apple, Google, 여러 대학의 실습실까지 다양한 곳에서 현장 업무용으로도 사용하고 있다. 위에서 언급한 언어들 보다 성능은 다소 떨어지지만 학습시간, 생산성(코딩하는 시간)이 월등이 좋기 때문에, 그리고 성능이 다소 떨어질지 언정 컴퓨터가 워낙 빨라져서 고민할 거리가 되지 않는다.

----

## 이것은 지킵시다 ##

주입식 교육 금지
늘 우리나라는 주입식 교육이 문제다. 언어들이 아무리 쉽고 좋아져도 코드를 작성하는데에 몇가지 관행이 있어서 코드를 읽기 편하게 해준다. PyCON 2017 의 <초중고 코딩교육> 토론 세션에서 한 특성화고 학생은 "시험은 어떻게 봐요?"라는 질문에 이렇게 대답했다.

— 일단, 시험은 시험지에 보는데(일동 웅성거림) 그 명령어들이 알듯 말듯하고. 어짜피 선생님들도 찾아서 보여주는데 우리는 외워야 되고. 아차, 시험문제에 카멜케이스(코딩 관행)을 지키지 않으면 점수가 까여요.

명령어를 외우고 관행을 지키는 것은 프로그램을 짜는데에 아무 도움이 되지 않는다. 명령어가 헷갈리면 찾아주면 된다. 그리고 대부분의 프로그래밍 도구들은 몇개 단어만 치면 명령어 후보들이 나와 자동으로 완성이 된다.

할 수 있는 데 까지만
2010년에 있던 일이다. "우리나라에도 르 꼬르동 뷔지에 코스 있잖아?" 당시 월급도 꽤나 모아뒀고 이왕 하는 취미라면 제대로 해보고 싶어서 어느 요리학원 다니기 보다 세계 일류 과정이라는 곳을 체험해 보고 싶었다. 똑같이 이렇게 가족이나 동료들에게 물어본다면 당시 내가 들었던 대답과 비슷한 대답을 들을 것이다.

코딩을 공부해서 삶이 나아지게 문제를 해결하게 만들어 주는 것 그리고 적성에 맞다면 그 길로 나아가게 도와주는 것이 이 플랫폼의 사용자측 목표상태[^fn1]이다. 그러나 어떤 사람은 본인에게 필요한 수준까지 쓰고 싶어하는데 억지로 끌고 가려는 노력을 기울이면 안된다.

너무 어려운 문제 금지
미적분을 고등학교 교과과정에서 빼자는 논란이 있었다. 이미 선택과목이 되면서 부터 대학교수들은 비상을 울렸다. 미적분도 모르고 이공대로 입학하면 어떻게 하라는 말이냐는 볼멘소리가 터져 나왔다. Huzen Dev. House는 이 토론에 만약 의견을 제시하라면 미적분은 고등교과에 꼭 필요하다는 입장이다. 미적분을 통해서 세상에 알 수 있는 것들은 너무나 많다. 그리고 공학, 물리학, 수학에만 쓰이는 것이 아니다. 언젠가는 한번 쯤 마주칠 법한 주제다. 문제는 미적분이 어렵다기 보다 시험 문제가 어려운 것이 아닌가? 우리나라의 물리학자도 이와 같은 의견을 낸 적이 있다. [^fn2] 

학생의 교육은 알고 행동하는 것 그 자체에 있어야한다. 코딩교육에도 아는지 모르는지 시험도 볼 필요가 있고 다소 어려운 개념을 가르칠수도 있다. 하지만 이 모든 것은 삶을 나아지게 만드는 것이지 성적과 오지도 않은 미래에 대한 준비는 아니다.


----

# 3. 어떻게 만들 것인가? #

## 성공사례 ##

칸 아카데미*
Salman Khan 이라는 사람이 조카들의 수학교육을 위해 태블릿으로 수식을 하나씩 그리면서 녹음을 한 영상을 유뷰브에 올린 것이 교육 플랫폼으로 발전했다. 반응은 뜨거워져서 1+1이 몇이니? 라는 질문에서 상미분방정식에 이르기 까지 영상을 올렸고 이를 뛰어넘어 컴퓨터를 비롯해 역사, 사회문화, 경제 등 다양한 학문으로 퍼져 나갔다. 차라리 후원을 받고 Huzen Dev. House가 Khan Academy의 자료를 번역하자는 의견도 있었다.

Udacity*
현재는 유료 강의가 대부분이지만 오픈 이전 테스트 때에는 모든 수준 높은 강의가 무료로 되어있어서 많은 개발자들이 도움을 받았다. 특히 Introduction of Computer Science 과목은 미국 버지니아대 David Evans교수가 Python 을 사용하는 법 하나하나 가르치면서 구글의 페이지랭크 검색 알고리즘을 소개하고 다음 강의들에 도전하라고 한다.

유다시티의 특징은 짧은 설명과 간단한 실습이다. 구글 검색 알고리즘은 Markov Chain 이라는 사전 지식이 필요하지만, 복잡한 것을 모두 제하고 사칙연산과 페이지 랭크 개념만 간략히 설명하며, 간략히 구현해 볼 수 있게 도와준다. Georgia Tech과 정규 석사과정을 가장 처음 실시했다. 비용은 $7,000 (on Campus $45,000)

현재 Nano degree 과정을 다수 개설해 웹사이트 개발에서 무인자동차 개발까지 현장에서 바로 쓸 수 있는 과정들도 개설해놓았다.

COURSERA: Stanford Univ.
Andrew Ng(스탠포드)교수가 Machine Learning 강좌를 공개하면서 유명해졌다. 그는 빅데이터, 머신러닝 의 대중화에 기여한 가장 중요한 사람으로 뽑히기도 한다. 역시 통계학에서 중요한 개념들 중에서 수식이나 복잡한 부분들에 대해서는 간략히 설명하고 기계학습을 시행해 보는데에 중점을 둔다. 과제는 주어진 문서를 읽고 올바른 식을 입력하는 것이다. 수식이 제대로 들어가면 자동으로 그래프가 그려져서 스스로 다양한 테스트도 할 수 있게 한다.

COURSERA: Johns Hopkins Univ.
의료통계과 교수 3인이 Data Science Specialist 과정을 개설했다. 기계학습 프로그래밍을 하는데 있어 필요한 도구들을 사용하는 법까지 알려준다. 자격증을 받을 때만 강좌당 $4.99를 지불해야하고 총 10강좌에 Capstone Project 가 하나 있다. (약 $500 소요)어느정도 컴퓨터 지식을 가지고 있으면 충분히 도전해 볼만 하다.

----

## 사업모델 ##

일단 오픈 부터
가장 중요한 부분은 역시나 어떻게 유지하는가에 달려있다. 서비스 플랫폼은 유지할 수 있는 재정적 뒷받침만 된다면, 간단하게 최소한의 규모로 시작해서 사용자의 요구사항을 들어가며 덩치를 키울 수 있다.
최초 서비스에는 Python 의 기초 수업, 실습, 그리고 2개의 교과 과정 연계 프로그램을 제공한다.

재정 수급
재정 수급의 원칙: Somebody pays (참조: Jesse Noller, Pycon: EveryBody Pays [^fn3])
모두가 지불할 수 없는 경우가 많으므로 누군가는(Somebody) 대신 부담하는 원칙으로 변형함
1) 비영리 재단으로 운영: 정부, 학교, 교사, 학부모, 단체 등으로 부터 후원을 받는 방법
2) 상업용 서비스: 오픈소스를 포기하고 처음부터 학교, 교육청 단위로 가격을 제시하고 사용 인원에 따라 가격을 책정함

조직 운영
인력 운용의 규칙: 모두가 자신의 일만큼 수익을 거두어야 한다.
플랫폼 제작인원 4명(기획, Project Manager 포함), 조직 운영 및 대외 홍보 매니져 2명, 팀장급 2명(제작, 운영)
장기 계획으로 운영인력 모집. 프리랜서 중 수익을 공유하며 초반 플랫폼 제작 작업에 동참 할 수 있는 인력부터 운용함
학교 교육에 바로 쓰일 수 있는 형태로 제작하여 누구나 한번쯤은 거치게 하여 인지도를 높임
학교를 졸업하고 전일제로 참여하고 싶은 엔지니어를 장학생으로 활용 (열정페이 방지)

열린 플랫폼으로
소스를 공개하거나 참여할 수 있는 창구를 만듦. 단순히 개선사항을 게시판, 이메일 등으로 제보하는 것이 아니라, 공개된 소스를 보고 개선 코드를 제출 할 수 있게 함. 일종의 Wiki 서비스 방식으로 현재의 코드를 보고 무엇이 문제인지 또는 개선 방식이 적합한지 토론할 수 있으며, 적합여부를 심사하여 반영함. 적합 여부는 수정 코드가 다른 서비스에 영향을 주지 않는지 충분히 테스트를 거친 후 결정함. 이를 위해 TDD방식으로 프로젝트를 진행하여야 함. [^fn4].


----

## 사실은 ##

생활코딩
우리나라에도 이에 못지 않은 훌륭한 플랫폼이 있다. 이고잉(닉네임)의 www.opentutorials.org 가 일반인을 대상으로 다양한 강좌를 영상으로 시연하는 모습을 보여준다. 이외에 다양한 컴퓨터 프로그래밍 이론들을 올려놓기도 했다. 생활 코딩은 오픈튜토리얼스라는 비영리 재단으로 탈바꿈하여 회원들의 후원금으로 운영되고 있다.

강의 품질이 상당하여 현장 개발자들도 어떻게 이 많은 분야를 자세하게 아느냐는 댓글도 달린다. 그래서 개발자들이 간혹 '생코신공'이라는 말을 하기도 하는데 생활코딩에서 검색해서 (일을) 풀어냈는 뜻이다. 다만 수업의 폭이 넓어 어디서 부터 시작해야하는지, 시작하는데 (개발환경구축, 테스트 서버 구축 등) 어려움을 겪는 등 시간이 많이 걸린다

다시 Udacity 스타일이 필요한 이유
Udacity는 제공하는 서버에서 코드를 입력하고  검증을 받는 식으로 진행이 되어서 자신이 짠 코드가 맞는지 확인하는데 시간이 얼마 안걸린다. 그리고 정확한 목표를 그때 그때 지정해 주기 때문에 좋은 가이드라인을 제공한다. 그래더 더욱 공공 코딩교육 플랫폼은 피드백이 빠른 Udacity의 방식이 필요하다.

----

# 4. 코딩과 수업 #

## 코딩을 하기 전에 ##

콘솔과 친해진는 방법 부터 배우기
과거 도스 와 같이 직접 명령어를 입력해서 컴퓨터를 다루는 방법. G-UI과 구분하여 CLI(Command Line Interface)라고 함. 대부분의 운영체제는 GUI로 작동하지만 검색어 URL 아이디와 비밀번호 와 같이 네트워크에서는 대부분 아직도 CLI 방식을 이용하고 있다.
코딩은 GUI 뒤에 숨겨져 있는 명령어들을 찾아가는 과정으로 영문으로 가득한 답답한 화면을 마주한다. 그러나 실제 컴퓨터를 만나기 위해서는 이것 부터 시작해야 한다.

관행에서 벗어나기
우리나라의 컴퓨터 환경은 WINDOWS, MS OFFICE, 한글20XX, 인터넷 익스플로러, 네이버로 한정되어 있는 경우가 많다. 특히 자료 검색에 있어서 코드관련 된 자료의 검색은 네이버와 구글의 검색결과가 심하게 차이난다. 그렇기 때문에 과제를 이행하는데 있어 폐쇄적 검색 결과를 보여주는 네이버에 의존해서는 안된다. 또한 인터넷 세계의 다양한 요소를 파헤치지 위해서는 인터넷 익스플로러 보다는 Firefox, Chrome 등을 써볼 필요가 있으며, 대부분의 서버는 Linux 환경에서 구현되기 때문에 WINDOWS 마저 벗어날 필요가 있다.

세계의 개발자들과 소통할 준비
개발 언어가 영어로 되었다고 하지만 이는 자연어로서 영어를 본떳다기 보다. 수학을 표현하는 영어를 옮겼다고 볼 수 있다. 즉, 영어를 사용하지 않아도 충분히 코드를 이해할 수 있으며 약간의 영어를 통해 질문을 구하고 답변을 해줄 수 있다. (간혹 코드로만 답변을 하는 경우가 있다) 우리말로도 여러 검색 결과가 나오기는 하지만 약간의 수준이 올라가면 대부분 영어로 소통한다. 이는 실전 영어를 사용해볼 기회이기도 하다. 개발자는 코드가 이상하다고 말할 수 있으나, 질문의 영어가 문법이 잘못되었다고 하지 않는다. 전 세계 개발자가 대상이기 때문에 쉬운 영어를 쓰는 것이 매너이기도 하다.

----

## Khan + Udacity ##

공공 코딩교육 플랫폼의 모습
코딩교육은 학생들이 컴퓨터로 교과 과제를 수행 할 수 있게 한다.

코딩을 모르는 친구들은?
코딩 교육이 없는 사람들을 위해 온라인으로 강의를 듣고 실습할 수 있게 해준다. Udacity와 유사하게 아주 협소한 주제로 간단한 실습을 웹브라우져 내에서 할 수 있게 해준다. 학교 등과 협의하여 방과 후 휴식 시간 등에 컴퓨터를 사용할 수 있게 해준다.

코딩에 필요한 것들은 온라인으로 모두 제공하자
코딩에 필요한 것은 우선 프로그램 언어가 실행 될 수 있는 컴퓨터. 프로그램 언어를 편집할 수 있는 편집기, 코드가 저장되고 변경내역이 관리 될 수 있는 저장소이다.[^fn5]플랫폼(웹사이트)에 로그인 하면 자신이 만들었던 코드들을 볼 수 있고 과거 변경 내역들을 살펴 볼 수 있게 한다. 

편집기: 보통 현장에서는 IDE라는 이름으로 편집, 실행, 디버깅(에러 잡기)까지 할 수 있는 도구들을 말한다. 그러나 가격이 지나치게 비싸다는 단점이 있다. Python의 경우 PyCharm이 있는데 community edition을 사용하면 무료로 사용할 수 있다. 그러나 처음 사용하는데 있어서 복잡하다

변경 내역 관리: 코드가 저장이 안되거나, 변경한 것이 틀렸을 때 대비한 도구, 형상관리도구라고도 한다. Git이라는 웹서비스를 통해 누구나 무료로 이 기능을 이용 할 수 있으나, 처음 사용하는 사람에게는 꽤 불편하다. 우리나라의 큰 업체도 Git이 좋은 것은 알지만 솔루션을 변경하는데 있어 위험요소가 더 크기 때문에 바꾸는 것을 꺼려한다.

웹브라우저를 고집하는 이유
누구나 사용할 수 있는 도구들이 있지만 코딩교육 플랫폼에서 익숙해 질 수 있게 한다. 이는 본인의 컴퓨터가 아닌 환경에서도 쉽게 접근 할 수 있게 해준다. 물론 이 유용한 도구들을 사용 할 수 있도록 도와준다.


----

## 교과과정 연계 프로그램 ##

경제 시뮬레이션을 통한 세금 실험하기 - Random Data를 활용하여
두 집합에 같은 수의 사람이 있으며, 소득은 정규분포에 의해 Random 으로 부여한다.
매년 1회 세금을 징수하는데 두집합의 세율은 차이가 난다.
(Optional) 세율을 누진세로 한다.
(Optional) 그래프 또는 엑셀 등 다른 프로그램에서 쓸 수 있게 데이터를 내보내기(Export)
5년 10년 등 징세 횟수가 지남에 따라 두집합의 소득 격차가 어떻게 차이나는지 지니 계수를 산출한다

필요 지식
- 코딩플랫폼 측
다수의 개인 데이터를 저장 해 둘수 있는 Dictionary 형 데이터 다루기 난이도 하
(Optional) 100만 세트 이상의 데이터를 빠르게 다루기 위한 라이브러리(외부기능)사용법. (난이도 중)
매년 개인의 소득이 늘어나고, 세율에 의해 징수되는 순서도 또는 의사(Pseudo) 코드 등 작성 (난이도 중)
순서도나 의사코드를 실제로 구현하기 위한 반복문 과 흐름제어 (난이도 하)
(Optional) 차트로 그리거나 엑셀 등에서 사용할 수 있게 Export 함(난이도 중)
(Optional) Markdown 코드를 활용하여 보고서를 코드로 직접 만들고 PDF 문서 등으로 배포함 (난이도 중)

- 교과 교육 측
분위별 소득 격차와 지니계수 (사회, 경제)
정규분포에 대한 개념 이해 (수학)
세율을 함수로 표현하기 (수학)
지니계수 계산(사회, 경제)
데이터로 인포그래픽스 만들어보기 (미술, 수학, 국어)

수업 설계
- 코딩플랫폼 측
이 프로그램을 진행하고자 하는 학교의 학생들의 코드 이해도를 알아보기 위해 사전지식 테스트. 성적에 반영되는 것을 막기 위해 개별 데이터는 제공하지 않음
수업 진행에 따라 어떤 예제를 주어줘야 하는지, 어떤 개발 환경을 제공해야 하는지 준비
예제를 수행하는데에 있어 자주 범할 수 있는 실수 등을 검출 할 수 있는 테스트 시나리오 준비

- 교과 교육 측
사회, 경제 교과 교사 2인 이상이 모여 현재 학생들의 학업 성취도에 대해서 의논한다. 위에서 제시한 프로그램에 해당하는 지식이 어떤 것이 필요한지 판단함. 학생들의 수준, 수업 시수 등의 여건에 에 따라 개인 또는 팀 등 수행 단위를 설정함
처음부터 기초 코딩 교육을 실시해 학생들이 자신만의 경제 시뮬레이션 코드를 만들 것인지 또는 이미 만들어져 있는 코드를 활용 할 것인지 결정함. 또한 단순히 적절한 숫자를 보여주는 것 부터 차트, 그래프, 보고서, 배포 까지의 단계에서 어느 정도 수준까지 진행 할 것인지 결정함
프로그램을 진행하는 데에 있어 어느 부분을 평가에 적용 할 것인지 정의함
코딩 또는 교과 지식이 취약한 학생들을 이끌고 갈 방법, 컴퓨터에 대한 접근성이 떨어지는 취약계층 학생 지원 방안

----

# 5. 두려워 할 필요가 없는 세상 #

## 시민의 감시 ##

시민의 감시
인공지능이 인간세계를 지배한다는 것은 우리가 나날이 변화하는 세상에 관심을 두지 않기 때문이 아닐까? 거의 대부분의 분야가 그렇듯이 다수의 시민이 감시에 나서면 과정은 투명하고 결과에 납득할 수 있다. 민주주의가 자본주의를 감시할 수 있는 시민을 양성하기 공교육 체제를 만들었다. 현대의 민주주의는 기술중심주의를 감시할 수 있는 시민을 양성하기 위해 공교육의 기술교육이 원활히 이루어져야 한다. 현실은 이 한계가 많기 때문에 시민의 입장에서 공공 기술교육을 위해 코딩 플랫폼을 내놓아야한다.  무관심이 가지는 암울한 미래를 두려워하기 보다는 지금이라도 감시할 수 있는 눈을 기르는 것에 중점을 두어야 한다.

----

## 참고 문서: 제작용 기획 문서 ##

# 경제 시뮬레이터
## subtitle: 어떤 정책이 더 좋을까? (경제, 컴퓨터, 수학)
#### Repository: https://github.com/rapier83/EconomySimulation.git

- 프로그래밍을 학생들이 직접해본다
- 경제 시뮬레이터를 만들어서 *세금이 많은 쪽*과 *세금이 거의 없는 쪽* 둘중 어느 곳이 더 평등한지 살펴보자
- 언어는 상관없지만 접근하시기 매우 쉬운 걸로 해야한다
- 안되면 일부를 수정하는 방향으로도 해보자
- 더 안되면 프로그램이 돌아가는 모습을 보게 하자
- 더더 안되면 주요 변수만 에디터에서 고쳐 볼 수 있게 하자
- 더더더 안되면 데이터가 csv 등으로 나오는 프로그램을 미리 제작하고 그래프를 그려보게하자
- 더더더더 안되면 데이터를 xls 로 나오게 하고 행복지수만 그래프로 그려볼 수 있게 해보자 ㅜㅜ
- 차라리 문법 한가지를 알려주고 일부 작성된 프로그램에 옳은 결과가 나올 수 있게 하는 방식으로 진행할까? (Andrew Ng(스탠포드, 컴퓨터과학과)교수가 온라인 강의 Coursera 의 Machine Learning 에서 MATLAB을 익히기 위해 쓴 방법)

# 과제들Work Flow
1. data scheming(modeling)  

- 세계를 구성하는 요소가 무엇이 있을까? 머릿속에서 끄집어 내 봅시다.
- 그 요소들이 어떤 관계인가? 조정 가능한 변수Fields(독립변수 중 통제 가능 Variables), 영향을 받는 요소(종속변수 Values), 영향을 받고 다른 변수에게 또 영향을 주는 변수(매개변수 Parameters), 조정불가능한 변수(상수, Constants), 
- 측정할 결과값은 무엇인지 정한다.

2. function(controller) writing  

- 변수들 간의 관계는 어떻게 되는가? 역시 머릿속에서 끄집어 내 봅시당.
- Var를 사용하여 어떤 영향을 주는지 글 또는 수식으로 표현한다. 
- 왜 그러닌지 이유도 달아놓는다 (주석달기 commentating, 코딩에서 굉장히 중요한 요소, 익명의 타인이 분석가능하게 도와주는 결정적 단서들)

3. Evaluating  

- 측정할 결과값이 타당한 범위 내에 들어가고 해석이 가능한지 평가한다.
- 그렇지 않을 경우 무엇이 문제인지 확인한다
- 프로그램을 수정한다 debugging

4. Visualizing  

- 측정값이 변수에 따라 어떻게 변하는지 보여주는 그래프를 그린다
- 함수가 어떻게 구현되는지 최종 순서도로 작성한다
- 다음 수업으로 넘길 과제: 데이터 관리/백업(컴퓨터) 인포그래픽스(미술) 보고서 작성(국어)

# 도구와 언어 Tools & Language
#### 후보 언어 Language
- Python: 기본 문법을 익히기 쉽다. 업계에서 장차 많이 쓰일 전망이다. 해외에서는 기술표준으로 자리잡은지 오래. 통계 관련 강자인 R을 대체할 도구가 있다. 다른 언어를 배우기 전 선행학습을 하기에 좋다. 확장성이 높다. 개발환경 셋팅이 쉬운 편이다.
- R: 2010년경 빅데이터 개념이 유행하며 이후 국내에서 가장 주목받은 언어, 통계 부문에서 가장 많이 쓰인다. 학부 수준의 통계 지식이 있으면 쓰기 쉽지만 그렇지 않으면 다소 어렵다. 초기 개발환경 셋팅이 매우 쉽다. 개발환경 셋팅이 쉽다. R 과  R Studio만 있으면 된다.
- MATLAB: 공학 기술 연구 개발용. 대학 연구실 등에서 가장 많이 쓰인다. 비싸다. 그러나 Octave 라는 오픈소스(무료 공개) 대안이 있다. 다만 통합개발환경(프로그램 에디터)이 구리다
- Haskell: 문법이 실제 수학 표기법과 가장 유사하다. 2020년대 전도 유망한 함수형 언어다. 다만 문법이 어렵고 현재는 해당 기술 수요가 낮다. 현재의 객체지향형 언어와 표현이 많이 다르다. 개발환경 셋팅이 다소 어렵다.
- Javascript: 현재 가장 대중적으로 많이 쓰이는 언어다. 웹페이지의 동적요소들을 통제하는 역할을 수행한다. 기술 수요도 많아 실무에서 처음 배우는 언어로 쓰이기도 한다. 과학적 접근을 하기에 많은 시간이 필요하다. 기본 Framework 가 존재하지 않는 부가 언어(로 보일 가능성이 높아 보인)다. 웹브라우져를 이용하기 때문에 컴퓨터만 있으면 개발환경이 갖추어 졌다고도 볼 수 있다.
- Excel: 가장 대중적인 도구이다. 개발용도 이외에 다양한 목적으로 사용된다. 프로그래밍으로 보기에 어려운 요소들이 많다.

#### 도구 Tools
- jupyter(Python): 코드 묶음(chunk)단위로 결과를 보면서 코딩할 수 있다. 후에 보고서를 쓰기에 편리하다. jupyter는 웹브라우저로 사용할 수도 있으나, sublime text 3 또는 PyCharm을 쓰면 더 편리하다. 다만 갖춰놓거나 매뉴얼을 쓰기 귀찮을 뿐
- R Studio: 개발환경이 편리하게 구성되어서 디버깅이 편리하다. 훌륭한 보고서를 출력하기에 용이하다. 단, 보고서를 출력하기 위해 Markdown 과 HTML 약간의 문법을 익혀야한다. Latex를 사용하면 수식표현도 가능하다.

> 보고서를 작성하기 위해서는 별도의 도구가 필요하긴 하나 위 두가지 모두 Markdown 등으로 작성하고 .pdf 파일로 출력하거나 웹페이지에서 확인 할 수 있게 만들 수 있다.  

> Markdown: HTML 약식 표기법. Rendering Engine(코드 변환기)가 필요하다. 앞서 언급한 문서 작성 형식. 자신이 작성한 프로그램과 결과를 보여주기 좋다. 프로그램 작성이 어렵다면, 코드 일부 분석으로 설명 달기, 그래프 붙여 분석 결과 작성하기만 할 수도 있다.  

> 이 두가지 이유와 공개 기술인 이유로 R과 Python이 현업, 연구실 등에서 가장 많이 쓰인다.

- github(optional): 코드를 백업하기 위한 도구. 처음 사용자는 다소 어렵다. 현재 많이 쓰이기 시작하고 있다.
- Trello(optional): 과제를 진행하며 발생하는 일들을 적어놓는 협업 도구.
- gitbook(optional): 과제 진행상황을 기록할 수 있는 워드프로세서. Markdown 호환. 온라인에 게시publish 가능
- google(optional): 네이버는 이제 그만
> 자료를 찾는데에 naver 등은 자체 데이터만 보여주기 때문에 제한이 많다. 
> 게다가 블로그 유인용 게시물이 다수 존재해서 자료찾는 시간이 더 걸릴 때가 있다
> 기초 문법 이후의 예제, 에러메세지 대응, 도구 사용법을 찾기 위해서는 영문검색이 필요한 경우가 많다. 이때에 네이버는 너무 취약하다.
> 영문자료만 존재한다 하더라도 구글을 이용하고 구글의 검색이 왜 뛰어난지, 네이버의 한계는 무엇인지 체험할 필요가 있다.
>> Stack Exchange 에는 전세계 개발자들이 안되는 영어로 코드를 보여주고 질문하고 답변한다. 기초부터 전문 수준 까지 어지간한 질문들은 거의 대부분 던져졌다. 개인의 기술계발은 커뮤니케이션에서 출발한다는 견해도 있고 꽤 설득력있다.

Ends

[^fn1]: User Target-Status 서비스를 이용해야할 이유를 제공하는 것, 서비스를 이용한 후 변화하게 되는 상태, 사용 효과, 효익Benefit 등으로 해석가능

[^fn2]: 이종필 교수(건국대) <아인슈타인탄생 100주년 기념 이종필 박사의 아주 특별한 상대성이론 강의>

[^fn3]: http://jessenoller.com/blog/2011/05/25/pycon-everybody-pays

[^fn4]: TDD 방식: 프로젝트 시작을 제작 보다 테스트 중심으로 구축하는 방법으로 다른 서비스의 영향을 주지 않는 수정(Refactoring)이 용이하다

[^fn5]: 보통 코딩 하기 전 편집기(IDE)와 인터프리터(프로그래밍 언어에 따라 컴파일러) 형상관리 도구를 설치하는 작업을 작업환경구축이라고 한다.